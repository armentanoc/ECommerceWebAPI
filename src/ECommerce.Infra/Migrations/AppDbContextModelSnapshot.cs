// <auto-generated />
using System;
using ECommerce.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ECommerce.Domain.Models.Exchange", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NewProductId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OriginalSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PriceDifference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NewProductId");

                    b.HasIndex("OriginalSaleId");

                    b.ToTable("Exchange");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Product", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<uint>("QuantityRemaining")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Refund", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OriginalSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OriginalSaleId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sale", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("SoldProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SoldProductId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Exchange", b =>
                {
                    b.HasOne("ECommerce.Domain.Models.Product", "NewProduct")
                        .WithMany()
                        .HasForeignKey("NewProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Models.Sale", "OriginalSale")
                        .WithMany()
                        .HasForeignKey("OriginalSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewProduct");

                    b.Navigation("OriginalSale");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Refund", b =>
                {
                    b.HasOne("ECommerce.Domain.Models.Sale", "OriginalSale")
                        .WithMany()
                        .HasForeignKey("OriginalSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalSale");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sale", b =>
                {
                    b.HasOne("ECommerce.Domain.Models.Product", "SoldProduct")
                        .WithMany()
                        .HasForeignKey("SoldProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoldProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
